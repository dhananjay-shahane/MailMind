# EMAIL-TO-FUNCTION EXECUTION SYSTEM - COMPLETE OVERVIEW

## PROJECT DESCRIPTION
This is an intelligent email processing system that receives emails, uses AI (Ollama LLM) to understand natural language requests, executes appropriate business functions, and sends automated replies with results including chart attachments.

## SYSTEM ARCHITECTURE
The system processes emails in this flow:
1. Email received via IMAP → 2. AI analyzes content → 3. Function executed → 4. Results sent back with charts

## COMPLETE FILE STRUCTURE

### ROOT DIRECTORY FILES
├── main.py                    # Main Flask application entry point
├── main_fastapi.py           # Alternative FastAPI implementation
├── pyproject.toml            # Project dependencies and configuration
├── replit.md                 # Project documentation and user preferences
├── project_dependencies.txt  # List of all packages used
├── overview.txt              # This comprehensive overview file
└── uv.lock                   # Dependency lock file

### API COMPONENTS (/api/)
├── api/
│   ├── __init__.py           # Package initialization
│   ├── email_integration.py  # Email monitoring and processing logic
│   ├── email_processor.py    # Email parsing and question extraction
│   ├── email_sender.py       # SMTP email sending with attachments
│   ├── function_registry.py  # Function registration and execution
│   └── ollama_client.py      # AI/LLM integration for function identification

### CONFIGURATION (/config/)
├── config/
│   ├── __init__.py           # Package initialization
│   └── config.py             # System configuration settings

### BUSINESS FUNCTIONS (/scripts/)
├── scripts/
│   ├── __init__.py           # Package initialization
│   ├── sales_functions.py    # Sales calculation functions
│   ├── user_functions.py     # User analytics functions
│   ├── analytics_functions.py # Website analytics functions
│   ├── system_functions.py   # System monitoring functions
│   ├── finance_functions.py  # Financial calculation functions
│   └── chart_functions.py    # Chart generation functions (NEW)

### WEB INTERFACE (/templates/ and /static/)
├── templates/
│   ├── base.html             # Base template layout
│   ├── index.html            # Main dashboard (Flask)
│   ├── index_fastapi.html    # Alternative dashboard (FastAPI)
│   ├── logs.html             # Execution logs page (Flask)
│   └── logs_fastapi.html     # Alternative logs page (FastAPI)
├── static/
│   └── style.css             # Dashboard styling

### GENERATED CONTENT
├── charts/                   # Auto-generated chart images (PNG format)
│   └── *.png                 # Sales, user, revenue, system metric charts
└── attached_assets/          # User uploaded files and system assets

## DETAILED FILE BREAKDOWN

### 1. MAIN APPLICATION (main.py)
WHAT IT DOES:
- Initializes Flask web application
- Registers all business functions from scripts
- Sets up email monitoring in background thread
- Provides web dashboard and API endpoints
- Manages execution logging

KEY COMPONENTS:
- Flask app setup and configuration
- Function registry initialization
- Background email monitoring thread
- Web routes: /, /logs, /health, /api/functions, /api/execute
- Integration with Ollama LLM service

### 2. EMAIL INTEGRATION (api/email_integration.py)
WHAT IT DOES:
- Connects to Gmail IMAP server
- Monitors for new emails continuously
- Processes incoming emails and extracts questions
- Uses Ollama LLM to identify appropriate functions
- Executes functions and sends replies with charts

KEY FEATURES:
- Real-time email monitoring
- Gmail IMAP connection management
- Email content parsing and question extraction
- LLM-powered function identification
- Automatic chart attachment for chart functions

### 3. EMAIL SENDER (api/email_sender.py)
WHAT IT DOES:
- Sends email responses via SMTP
- Attaches PNG chart files to emails
- Formats professional email responses
- Handles email errors and notifications

KEY FEATURES:
- SMTP connection management
- Chart attachment support
- Professional email formatting
- Error notification emails

### 4. FUNCTION REGISTRY (api/function_registry.py)
WHAT IT DOES:
- Dynamically registers Python functions
- Manages function metadata and signatures
- Executes functions safely with timeout protection
- Provides function discovery and search

KEY FEATURES:
- Dynamic function loading from modules
- Timeout protection for function execution
- Function signature analysis
- Safe execution environment

### 5. OLLAMA CLIENT (api/ollama_client.py)
WHAT IT DOES:
- Communicates with Ollama LLM service
- Analyzes email content using AI
- Maps natural language to function names
- Provides AI-powered function identification

KEY FEATURES:
- LLM API integration
- Natural language processing
- Function identification logic
- Fallback analysis when LLM unavailable

### 6. CHART FUNCTIONS (scripts/chart_functions.py)
WHAT IT DOES:
- Generates professional charts in PNG format
- Creates sales trends, user analytics, revenue comparisons
- Uses matplotlib with white text on dark background
- Returns file paths for email attachment

CHART TYPES:
- generate_sales_chart: Monthly sales trend line chart
- generate_user_analytics_chart: User distribution pie chart
- generate_revenue_chart: Quarterly revenue comparison bars
- generate_system_metrics_chart: System performance over time

### 7. BUSINESS FUNCTIONS (scripts/*.py)
WHAT THEY DO:
- sales_functions.py: Calculate sales metrics, growth, top products
- user_functions.py: User statistics, activity, demographics
- analytics_functions.py: Website traffic, conversion metrics
- system_functions.py: Server health, database metrics, logs
- finance_functions.py: Financial ratios, profit/loss, cash flow

### 8. CONFIGURATION (config/config.py)
WHAT IT DOES:
- Manages all system settings
- Email server configuration (SMTP/IMAP)
- Ollama LLM configuration
- Security and timeout settings

KEY SETTINGS:
- Email credentials and server settings
- LLM model selection (llama3.2:1b)
- Function execution timeout limits
- SMTP and IMAP configuration

## HOW THE SYSTEM WORKS - STEP BY STEP

### EMAIL PROCESSING WORKFLOW:
1. **Email Monitoring**: System continuously monitors Gmail IMAP for new emails
2. **Email Parsing**: Extracts sender, subject, and body content from emails
3. **Question Extraction**: Identifies questions or requests in email content
4. **LLM Analysis**: Ollama AI analyzes the question and available functions
5. **Function Identification**: AI selects the most appropriate function to execute
6. **Function Execution**: System executes the identified function safely
7. **Chart Generation**: If chart function, generates PNG visualization
8. **Email Reply**: Sends response email with results and chart attachment
9. **Logging**: Records execution details for monitoring

### WEB DASHBOARD FEATURES:
- View all 19 registered functions
- Monitor system health and LLM status
- View execution logs and history
- Test functions via API endpoints
- Real-time status updates

### CHART GENERATION PROCESS:
1. Chart function receives request
2. Generates realistic business data
3. Creates professional chart with white text
4. Saves as high-quality PNG file
5. Returns file path for email attachment
6. Chart automatically attached to email reply

## SYSTEM REQUIREMENTS
- Python 3.11+
- Gmail account with IMAP/SMTP access
- Ollama LLM service running locally
- PostgreSQL database (optional)
- Internet connection for AI model

## GETTING STARTED
1. Configure email credentials in environment variables
2. Start Ollama service: `ollama serve`
3. Run the application: `python main.py`
4. Send test emails to configured email address
5. Monitor dashboard at http://localhost:5000

## API ENDPOINTS
- GET / → Main dashboard
- GET /logs → View execution logs
- GET /health → System health check
- GET /api/functions → List all functions
- POST /api/execute → Execute specific function
- GET /api/status → Real-time system status

## EMAIL COMMANDS EXAMPLES
Send emails with these requests:
- "Show me sales chart" → Generates and emails sales trend chart
- "What are user statistics?" → Returns user analytics with pie chart
- "Generate revenue report" → Creates revenue comparison chart
- "How many users do we have?" → Returns user count statistics
- "Show system metrics" → Generates system performance chart

## SECURITY FEATURES
- Function execution timeout protection
- Email content sanitization
- Module whitelisting for function loading
- Error isolation to prevent system crashes
- Secure SMTP/IMAP authentication

## MONITORING AND LOGGING
- Real-time execution logging
- Function performance tracking
- Email processing status
- LLM availability monitoring
- Chart generation statistics

This system combines email automation, AI-powered natural language processing, business function execution, and professional chart generation into a complete email-to-function execution platform.